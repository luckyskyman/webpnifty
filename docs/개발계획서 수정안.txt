## 🚀 최종 개발 계획서 프롬프트 (수정안): 수익 극대화 이미지 변환기 "WebPnifty"

### **1. 프로젝트 개요 및 목표**

  * **프로젝트명:** WebPnifty
  * **한 줄 요약:** 뛰어난 사용자 경험을 통해 광고 수익을 극대화하는 클라이언트 사이드 기반의 차세대 이미지 변환 웹 애플리케이션.
  * **핵심 목표:** 사용자의 재방문을 유도하는 직관적이고 세련된 UI를 구축하고, 전략적인 광고 배치를 통해 안정적인 수익 모델을 확립하며, 장기적으로 프리미엄 기능 도입을 통한 수익 다각화를 모색한다.
  * **타겟 플랫폼:** **Vercel**. Hobby 플랜(무료)으로 개발 및 테스트 후, Pro 플랜(유료)으로 전환하여 정식 서비스를 론칭한다.

### **2. 기술 스택 및 라이브러리**

  * **프레임워크:** **Next.js** (App Router 방식)
  * **언어:** **TypeScript**
  * **UI 및 스타일링:** **Tailwind CSS** + **Shadcn/UI**
  * **상태 관리:** **Zustand** (가볍고 직관적인 상태 관리)
  * **애니메이션:** **Framer Motion**
  * **아이콘:** **Lucide React**
  * **이미지 처리:** **browser-image-compression** (웹 워커와 함께 사용)

### **3. 핵심 아키텍처: 3-Step User Journey**

사용자 동선을 `업로드` → `설정 및 변환` → `결과 확인 및 공유`의 3단계로 명확히 분리하여 체류 시간을 늘리고, 각 단계 전환 시점을 활용해 광고 수익 기회를 창출한다.

-----

### **4. 개발 단계별 상세 계획 (Roadmap)**

#### **Phase 1: 프로젝트 환경설정 및 UI 레이아웃 구축 (1주차)**

*   **프로젝트 초기화:** `create-next-app`을 사용하여 TypeScript, Tailwind CSS, App Router 기반 프로젝트 생성.
*   **UI 라이브러리 통합:** `Shadcn/UI` 초기화 및 `button`, `slider`, `card`, `input`, `progress`, `switch`, `select` 등 필요 컴포넌트 추가.
*   **핵심 페이지 및 라우팅 설정:** `app/page.tsx`에서 Zustand를 사용해 3단계(upload, edit, result) 조건부 렌더링 구조 확립.
*   **기타 라이브러리 설치:** `framer-motion`, `lucide-react` 설치.

#### **Phase 2: 핵심 기능 구현 (MVP+) (2-3주차)**

1.  **이미지 처리 로직 고도화 (`useImageConverter.ts`)**
    *   `browser-image-compression` 라이브러리 설치.
    *   **(개선)** **웹 워커(Web Worker)를 활용**하여 이미지 변환 중 UI 멈춤 현상을 방지.
    *   **(확장)** 변환 옵션에 **WebP 외 AVIF 포맷** 추가.
    *   훅은 변환 진행 상태, 원본/결과물 크기, 압축률 등의 상태를 함께 관리.

2.  **컴포넌트 개발 및 기능 연동**
    *   **`UploadStep.tsx` 컴포넌트:**
        *   **(확장)** **일괄 처리(Batch) 기능**을 위해 여러 파일을 한 번에 드래그 앤 드롭으로 업로드하는 기능 구현.
        *   Zustand 스토어는 단일 파일이 아닌 **파일 배열** 상태(`FileState[]`)를 관리하도록 수정.
    *   **`EditStep.tsx` 컴포넌트:**
        *   **(확장)** **고급 설정 옵션** 추가:
            *   `Select` 컴포넌트를 사용한 **포맷 선택 (WebP/AVIF)**.
            *   `Switch` 컴포넌트를 사용한 **메타데이터(EXIF) 제거** 옵션.
            *   `Input`을 사용한 **이미지 리사이징(해상도 조절)** 옵션.
        *   옵션 변경 시 실시간으로 예상 결과(압축률, 파일 크기) 표시.
        *   **(확장)** **프리셋 기능**을 위한 UI 추가 (e.g., '웹사이트용', '최대 압축' 버튼).
    *   **`ResultStep.tsx` 컴포넌트:**
        *   변환 결과(절약된 용량 등)를 시각적으로 보여주는 대시보드 구현.
        *   **(확장)** **개별 다운로드** 및 **'모두 ZIP으로 다운로드'** 기능 구현.

#### **Phase 3: 사용자 경험(UX) 고도화 (4주차)**

1.  **전/후 비교 뷰어 (`ImageComparator.tsx`) 구현**
    *   `ResultStep` 내부에 원본과 결과물을 나란히 놓고 슬라이더로 비교할 수 있는 컴포넌트 추가.
    *   사용자에게 서비스의 가치를 시각적으로 명확하게 전달.

2.  **상태별 UI/UX 개선**
    *   일괄 변환 시 전체 진행률과 파일별 진행률을 `Progress` 컴포넌트로 표시.
    *   업로드, 변환, 완료 등 각 상태에 맞는 명확한 애니메이션과 피드백 제공.

#### **Phase 4: 수익화 연동 및 SEO 최적화 (5주차)**

*   **Google AdSense 연동:** `app/layout.tsx`에 AdSense 스크립트 추가 및 `ads.txt` 파일 구성.
*   **전략적 광고 배치:** `AdBanner.tsx` 컴포넌트를 생성하여 페이지 주요 위치(상단, 결과 하단 등)에 배치.
*   **기본 SEO 설정:** `layout.tsx`의 `metadata` 객체를 사용하여 기본 SEO 정보 설정.

#### **Phase 5: 배포 및 분석 (6주차)**

*   **Vercel 배포:** GitHub 레포지토리 푸시 및 Vercel 프로젝트 임포트.
*   **상용화 준비:** Vercel Pro 플랜으로 업그레이드하여 상업적 이용 라이선스 확보.
*   **분석 및 모니터링:** `@vercel/analytics`를 설치하여 사용자 데이터 수집 및 성능 모니터링.

#### **Phase 6: 장기 성장 전략 (7주차 이후)**

1.  **프리미엄 모델(Freemium) 도입 고려**
    *   **Pro 기능 기획:** 광고 제거, 일괄 변환 개수 무제한, 워터마크 추가 등 유료 기능 구상.
    *   결제 시스템 연동 (e.g., Stripe, Lemon Squeezy).

2.  **콘텐츠 마케팅을 통한 SEO 강화**
    *   `/blog` 경로를 생성하고 "WebP란?", "이미지 최적화 가이드" 등 정보성 콘텐츠를 주기적으로 발행.
    *   검색 엔진을 통한 자연스러운 사용자 유입 증대.
